{"response": {"status": "ok", "userTier": "developer", "total": 1, "content": {"id": "technology/2007/dec/13/opensource.software", "type": "article", "sectionId": "technology", "sectionName": "Technology", "webPublicationDate": "2007-12-13T23:44:36Z", "webTitle": "Developers take REST with Rails", "webUrl": "https://www.theguardian.com/technology/2007/dec/13/opensource.software", "apiUrl": "https://content.guardianapis.com/technology/2007/dec/13/opensource.software", "fields": {"headline": "Developers take REST with Rails", "bodyText": "Programmers got an early Christmas present last Friday when the long-awaited version 2.0 of the Ruby on Rails web development framework was finally released (tinyurl.com/yo4nan). This evolutionary upgrade to an increasingly popular technology could lead to simpler, faster websites with better mobile interfaces and a greater ability to swap data - good news for all those programmers, but even better news for users of the web. Ruby on Rails (rubyonrails.com), often called just \"Rails\", is an open source software project that provides the infrastructure needed to build dynamic, database-driven websites easily and quickly. Rails is written in the Ruby programming language and has undergone an explosion of popularity among web developers since version 1.0 was launched two years ago, with its proponents claiming tenfold productivity increases over more traditional approaches based on Java and PHP. So far it's been used to build several high-profile websites including Twitter and YellowPages.com, and is now being adopted by organisations such as the BBC and LinkedIn. Keeping things simple Many of its converts have been won over by its opinionated philosophy. One Rails mantra, \"convention over configuration\", encourages developers to conform to certain best-practice assumptions about how their application will work, rather than configuring the framework to accommodate it. Another, \"don't repeat yourself\", recommends distilling each design decision into a single authoritative piece of code or data rather than duplicating it at the cost of clarity. While this intentionally dictatorial environment makes some programmers uncomfortable, others find that it frees them to spend their time concentrating on the interesting and fun parts of their applications. David Heinemeier Hansson (loudthinking.com), the creator of Rails, says that the focus of version 2.0 is an application style called \"representational state transfer\", or REST. \"These principles are nothing new,\" he says. \"They've been around for years, but most web developers just didn't seem to care. Now the REST approach is leading us to all kinds of simplifications that benefit both programmers and users.\" So-called RESTful applications treat every important piece of information as a resource that can be independently viewed, updated or deleted in a standard way via its own unique URL. While more traditional web applications might offer many arbitrary actions - \"add person A to group B\", for example - RESTful apps achieve the same results while only allowing the creation or modification of resources: \"create a membership\". This uniformity, and the focus on diverse resources instead of diverse actions, helps to simplify the design of applications. \"It's a deceptively simple idea,\" says Hansson, \"but one that can initially be hard to wrap your head around. Once it clicks for you, though, you'll never look at web application development in quite the same way again. The old way will seem rather antiquated, complicated and nowhere near as aesthetically pleasing.\" Programmer benefits aside, the REST style also makes it easier for websites to share and exchange data, something that's becoming increasingly important as we move our address books, bank accounts and social lives online. Because all RESTful applications have a similar structure and make their resources available via URLs, it's easy for one web application to retrieve and update the information held inside another, so more sites will be able to provide APIs and participate in mash-ups. Rails 2.0 also makes it easy for sites to serve up this information in different formats as required; a particular resource can be made available as an RSS or Atom feed, a CSV or XML file, or even a dedicated iPhone-only web page. This spirit of openness is evident in the development of Rails itself, which accepts daily contributions of code from thousands of volunteers. \"I actually tend to find the most rewarding progress to be the cumulative effect of thousands of tiny improvements,\" says Hansson. \"That's what sets Rails apart from many of the also-rans. Yes, we've had the pleasure of popularising tons of major improvements to web application development, but the secret sauce is really the thousands of little things that the vast network of contributors have decided to care about.\" Increasingly commercial The popularity of Rails has spawned imitators in other programming languages - it's already been ported to JavaScript (tinyurl.com/3xwb3p) and PHP (akelos.org), and programmers at the BBC have recently developed Perl on Rails (tinyurl.com/29djbv). Its mainstream adoption is likely to be boosted further by its inclusion in the Mac's latest Leopard OS. Hansson points to a \"natural cultural allegiance\" between Rails developers and Apple users: \"We appreciate the same things. We find happiness and passion in things that are beautiful, tastefully executed and help us get the job done faster. The fact that Leopard ships with Rails is only a natural extension of that cultural bond.\" With this increase in attention, Rails is undeniably becoming more commercial - a fact Hansson doesn't mind at all. \"I have absolutely no problem with commercialism. What good is it to enjoy doing Ruby on Rails if you have to return to the Java or .Net mines every morning to slog through another day? We want people to be happy doing real work, making a real living.\""}, "isHosted": false, "pillarId": "pillar/news", "pillarName": "News"}}}